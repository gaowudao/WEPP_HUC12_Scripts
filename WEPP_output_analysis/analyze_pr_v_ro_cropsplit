import pandas as pd
import numpy as np
import os

def analyze_PRvRO(season,month_low, month_high):
    '''
    Analyze wepp and obs precip vs runoff 

    mod_dir = inserts folder names of calibration type and simulation type
    into common directory path

    season = season name

    month_low = numerical cutoff for first month in season

    month_high = integer corresponding to month after final month in season
    (i.e. 6 for spring (if month < 6...))

    Spring does not include march due to frozen soil
    '''

    def prep_data(obs_dir, wshed, cli_dir, wepp_out_dir, hillID, TSS_adjust, mod_rot_starters, obs_rot, crop1_yrs, crop2_yrs):
        '''
        load in and prep data for graphing

        obs_dir = directory containing observed data
        wshed = watershed/site name
        cli_dir = directory containing cligen file (same as wepp run dir)
        wepp_out_dir = directory containing wepp output files
        hillID = ID of WEPP hillslope in simulated site run
        mod_rot_starters = integers corresponding to years in the observed crop rotation
        obs_rot = years (not short integers)  in observed crop rotation
        crop1_yrs = years for first crop type in rotation
        crop2_yrs = years for second crop type in rotation
        '''

        ###### load in climate data and fill in missing obs values ######

        #Create path to daily DF data and read into df
        DF_daily_xlsx = str(obs_dir + '{}_daily_DF.xlsx'.format(wshed))
        DF_df = pd.read_excel(DF_daily_xlsx)
        DF_df['DNR_pr'] = (DF_df['Pr'].apply(pd.to_numeric, errors='coerce')) * 25.4

        #Read in and prep cligen data
        cli_df = pd.read_csv(str(cli_dir + '/{}.cli'.format(hillID)), skiprows = 13, sep = '\s+| ', engine = 'python')
        cli_df.drop([0,], axis = 0, inplace = True)
        cli_df.reset_index(inplace = True)
        cli_df['cli_pr'] = cli_df['prcp'].astype(float)

        #concatenate cligen precip column to DF df and return new df
        comb_df = pd.concat([DF_df, cli_df['cli_pr']], axis=1)

        #If DF col is missing data, fill in with cligen data using np.where()
        comb_df['filled_pr'] = (np.where(comb_df['DNR_pr'].isna(),\
                                        comb_df['cli_pr'],\
                                        comb_df['DNR_pr']))

        

        ###### Load in runoff data ######

        #Load in observed data (whole dataset)
        obs_data_whole = pd.read_excel(str(obs_dir + '/{}_Obs_RO.xlsx'.format(wshed)))

        #select data for March-November
        obs_data_months = obs_data_whole[obs_data_whole['Month'].astype(int) > month_low]
        obs_data_months = obs_data_months[obs_data_months['Month'].astype(int) < month_high]

        #trim down data column to only include day, month, and year
        obs_data_months['Start'] = obs_data_months['Start'].astype(str).str[0:10]
        obs_data_months['End'] = obs_data_months['End'].astype(str).str[0:10]

        #observed data occasionally has multiple events on same day. Combine these into daily values
        aggregation_functions = {'Start': 'first', 'End':'first', 'Year': 'first', 'Month': 'first',\
                                'Day':'first', 'RO (in)':'sum', 'TSS (lbs/ac)':'sum'}

        obs_data_months = obs_data_months.groupby([obs_data_months['Start'],obs_data_months['End']]).aggregate(aggregation_functions)

        #convert runoff from in to mm  and TSS from lbs/ac to tons/ha in observed data
        #Adjust TSS data so that only suspended sediments are accounted for
        obs_data_months['RO'] = obs_data_months['RO (in)'] * 25.4
        obs_data_months['TSS'] = (obs_data_months['TSS (lbs/ac)'] * 0.00123553) * float(TSS_adjust) #tons/ha


        #Read in data from ebe WEPP output file for a specified calibration scenario


        #get ebe file from output directory
        hillslopes = [x for x in os.listdir(wepp_out_dir) if x.endswith('.ebe.dat')]

        #only one hillslope in DF simulations so just select first file in list
        hill = hillslopes[0]

        #define column names for ebe file load in
        ebe_col_list = ['Day', 'Month', 'Year', 'Precip', 'RO', 'IR-det',\
                        'Av-det', 'Mx-det', 'Point', 'Av-dep', 'Mx-dep',\
                        'Point_2', 'Sed-Del', 'ER']

        #read in ebe file to dataframe
        all_data = pd.read_csv(str(wepp_out_dir+hill), skiprows = 3,\
                            names = ebe_col_list, sep = '\s+', header=None)

        all_data['TSS'] = all_data['Av-det'] * 11.0231

        #select data for March-November
        sel_mod_data = all_data[all_data['Month'] > month_low] 
        mod_data_months = sel_mod_data[sel_mod_data['Month'] < month_high]



        ###### prep runoff/TSS data ######


        ## Obs data ##

        
        #merge observed precip to observed runoff/TSS events
        event_precip = []

        #sum daily precip values by the corresponding runoff events
        for start,end in zip(obs_data_months['Start'], obs_data_months ['End']):

            #if daily precip vals are within date range, select and sum
            matched_pr = comb_df[(comb_df['Date'] >= start) & (comb_df['Date'] <= end)]
            event_pr = matched_pr['filled_pr'].sum()
            event_precip.append(event_pr)
            
        #set summed precip values as Pr column. Each row corresponds to a runoff event
        obs_data_months['Pr'] = event_precip

        #loop through runoff events (df rows)
        for index, row in obs_data_months.iterrows():
            #remove snow melt runoff events
            if row['Pr'] == 0 or row['RO'] > row['Pr']:
                obs_data_months.drop(index = index, inplace=True)
        
        obs_df = obs_data_months

        print(obs_df)

        ## Modeled data ##

        #create list to hold all "corresponding_mod_yrs" lists
        all_div_mod_yrs = {}

        #loop through mod start years (equivalent to obs year length)
        for mod_starter_yr,obs_yr in zip(mod_rot_starters,obs_rot):
            
            #create list that holds all mods years corresponding to the given observed year
            corresponding_mod_yrs = []
            
            #loop through a multiplier so that all model years that match an obs year are
            #created and add to the corresponding_mod_yrs list
            for n in range(0,11):
                if n == 0:
                    mod_yr = mod_starter_yr
                if n > 0:
                    mod_yr = mod_starter_yr + (len(obs_rot) * n)
                    
                corresponding_mod_yrs.append(mod_yr)
                
            #append list of all matching mod years to a new list so that there is a list of
            #matching mod years for each observed year
            all_div_mod_yrs[obs_yr] = corresponding_mod_yrs

        #change years in WEPP ebe format (1,2,3,4,5, etc) to years corresponding to obs data (ex: 2012, 2013, etc)
        for year,key in zip(all_div_mod_yrs, all_div_mod_yrs.keys()):
            mod_data_months['Year'].replace(all_div_mod_yrs[year], key, inplace = True)

        mod_df = mod_data_months

        print(mod_df)


        #select data by crop (1 = crop 1, 2 = crop 2)
        obs1_out = obs_df[obs_df['Year'].isin(crop1_yrs)]
        mod1_out = mod_df[mod_df['Year'].isin(crop1_yrs)]

        obs2_out = obs_df[obs_df['Year'].isin(crop2_yrs)]
        mod2_out = mod_df[mod_df['Year'].isin(crop2_yrs)]

        return obs1_out, mod1_out, obs2_out, mod2_out


    #create list of watershed IDs, simulated hillslope IDs, and number 
    #of years in each observed crop rotation (crop rot = simulation period)
    wshed_lst = ['BE1', 'DO1', 'GO1', 'RO1', 'ST1']
    hillslopes = ['p221', 'p206', 'p66', 'p77', 'p154']
    ke_mods = ['Ke x 3', 'Ke / 2','Ke x 3','Ke x 5','No Ke Adj']
    mod_dir_lst = ['DF_Comp3/Obs_full',\
                   'DF_Comp3/Obs_full',\
                   'DF_Comp3/Obs_full',\
                   'DF_Comp5/Obs_full',\
                   'DF_Comp/Obs_full']

    #Define TSS adjustments for obs data
    # = Percent of TSS Yield that is soil particulate matter (i.e. no organic matter)
    #for each DF site
    TSS_adjustments = [0.86, 0.81, 0.85, 0.835, 0.83]


    #prep lists for mod starts, obs years, and years for each crop
    lst_mod_rot_starts_wshed = [[1,2,3,4,5], 
                                [1,2,3,4,5,6,7],\
                                [1,2,3,4,5,6],\
                                [1,2,3,4,5,6],\
                                [1,2,3,4,5,6,7]]

    obs_rot_yrs = [[2012,2013,2014,2015,2016],\
                   [2013,2014,2015,2016,2017,2018,2019],\
                   [2011,2012,2013,2014,2015,2016],\
                   [2014,2015,2016,2017,2018,2019],\
                   [2011,2012,2013,2014,2015,2016,2017]]

    lst_crop1_yrs = [[2013,2015],\
                     [2013,2015,2017,2019],\
                     [2011,2012],\
                     [2015,2016,2017,2019],\
                     [2011,2012,2013]]

    lst_crop2_yrs = [[2012,2014,2016],\
                    [2014,2016,2018],\
                    [2013,2014,2015,2016],\
                    [2014,2018],\
                    [2014,2015,2016,2017]]

    crop1_names = ['Corn', 'Corn', 'Alfalfa', 'Corn', 'Corn']
    crop2_names = ['Soy', 'Soy', 'Corn', 'Soy', 'Alfalfa']

    mod_dic = {}
    obs_dic = {}

    #loop through variables that correspond to the 5 watersheds
    for wshed, hill, mod_dir, TSS_adjusts, mod_rot_starters, obs_rot, crop1_yrs, crop2_yrs, crop1, crop2 in zip(wshed_lst,\
                                                                                                                hillslopes,\
                                                                                                                mod_dir_lst,\
                                                                                                                TSS_adjustments,\
                                                                                                                lst_mod_rot_starts_wshed,\
                                                                                                                obs_rot_yrs,\
                                                                                                                lst_crop1_yrs,\
                                                                                                                lst_crop2_yrs,\
                                                                                                                crop1_names,\
                                                                                                                crop2_names):

        #set directory paths to DF and cligen data
        obs_dir = 'C:/Users/Garner/Soil_Erosion_Project/WEPP_PRWs/{}/obs_data/'.format(wshed)
        cli_dir = 'C:/Users/Garner/Soil_Erosion_Project/WEPP_PRWs/{}/Runs/{}/wepp/runs/'.format(wshed,mod_dir)
        wepp_out_dir = 'C:/Users/Garner/Soil_Erosion_Project/WEPP_PRWs/{}/Runs/{}/wepp/output/'.format(wshed,mod_dir)

        obs_dic[wshed+crop1], mod_dic[wshed+crop1],\
        obs_dic[wshed+crop2], mod_dic[wshed+crop2]  = prep_data(obs_dir,\
                                                                wshed,\
                                                                cli_dir,\
                                                                wepp_out_dir,\
                                                                hill,\
                                                                TSS_adjusts,\
                                                                mod_rot_starters,\
                                                                obs_rot,\
                                                                crop1_yrs,\
                                                                crop2_yrs)


    import matplotlib.pyplot as plt
    import matplotlib.patches as mpatches

    #set up colors for crops in each watershed
    mod_colors1 = ['orange', 'orange', 'purple', 'orange', 'orange']
    obs_colors1 = ['red', 'red', 'pink', 'red', 'red']
    mod_colors2 = ['green', 'green', 'orange', 'green', 'purple']
    obs_colors2 = ['lime', 'lime', 'red', 'lime', 'pink']

    #Define x/y axis coordinates for each plot
    subx_vals = [0,0,1,1,0]
    suby_vals = [0,1,0,1,2]

    def graph_Pr_RO(dic1, dic2, crop_names1, crop_names2, colors1, colors2, x_lab, y_lab, season, title, out_name, comp_type, col_lab1, col_lab2):
        '''
        dic1 = first dictionary input option
        dic2 = second dictionary input option
        crop_names1/2 = list of crop names
        colors1/2 = colors corresponding to crop names
        season = name of season
        title = partial title insert being assigned to output figure
        col_lab1/2 = column label for variables (different between obs and mod)
        '''

        #Set up a subplot for each watershed that contains plots for each watershed
        fig, axes = plt.subplots(nrows = 2, ncols = 3, figsize = (16, 12))

        if out_name == 'DF':
            ke_adjs = ['','','','','']

        if out_name == 'WEPP':
            ke_adjs = ke_mods


        #loop through watershed, crops, colors for crops, and the subplot x,y coords
        for wshed, ke_mod, crop1, crop2, color1, color2, subx, suby in \
            zip(wshed_lst, ke_adjs, crop_names1, crop_names2, colors1, colors2, subx_vals, suby_vals):
            
            #define x and y values
            x1 = dic1[wshed+crop1][col_lab1]
            y1 =dic1[wshed+crop1][col_lab2]

            axes[subx, suby].scatter(x1,\
                                     y1,\
                                     marker = 'o',\
                                     label = crop1,\
                                     color = color1,\
                                     alpha = 1)

            axes[subx, suby].scatter(dic2[wshed+crop2][col_lab1],\
                                    dic2[wshed+crop2][col_lab2],\
                                    marker = 'o',\
                                    label = crop2,\
                                    color = color2,\
                                    alpha = 1)

            axes[subx,suby].set_xlabel('{} (mm)'.format(x_lab))
            axes[subx,suby].set_ylabel('{} (tons/ha)'.format(y_lab))

            #Add sub-title
            axes[subx,suby].set_title('{} {}'.format(wshed,ke_mod))

        #remove blank plot that is generated
        fig.delaxes(axes[1][2])

        #Add title to grouping of subplots
        fig.suptitle(title, fontsize = 14)

        #Set up figure legend items
        corn = mpatches.Patch(color='orange', label='Corn')
        soy = mpatches.Patch(color='green', label='Soy')
        alf = mpatches.Patch(color='purple', label='Alfalfa')
        red_box = mpatches.Patch(label = 'Observed Data (Higher Conc.)', facecolor = '#FF000000',edgecolor='red')
        blue_box = mpatches.Patch(label = 'Observed Data (Lower Conc.)', facecolor = '#FF000000', edgecolor='blue')

        if out_name == mod_out:
            fig.legend(handles=[corn,soy,alf,red_box, blue_box],bbox_to_anchor = [0.87,0.24], loc = 'lower right')

        if out_name == obs_out:
            fig.legend(handles=[corn,soy,alf],bbox_to_anchor = [0.86,0.24], loc = 'lower right')

        #save figure to comparisons folder
        fig_path = 'C:/Users/Garner/Soil_Erosion_Project/WEPP_PRWs/Comparisons/{}_{}_{}.png'.format(out_name,comp_type,season)
        fig.savefig(fig_path)

    obs_title = 'Runoff vs Soil Detachment (TSS) for {} Discovery Farms Data \n Observed Crop Rotation Periods'.format(season)
    mod_title = 'Runoff vs Soil Detachment (TSS) for {} WEPP Simulations \n Multiple Crop Rotation Simulations'.format(season)

    obs_out = 'DF'
    mod_out = 'WEPP'

    graph_Pr_RO(obs_dic, obs_dic, crop1_names, crop2_names, mod_colors1, mod_colors2, 'Runoff', 'Soil Detachment', season, obs_title, obs_out, 'ROvTSS', 'RO','TSS')
    graph_Pr_RO(mod_dic, mod_dic, crop1_names, crop2_names, mod_colors1, mod_colors2, 'Runoff', 'Soil Detachment', season, mod_title, mod_out, 'ROvTSS', 'RO','TSS')

analyze_PRvRO('Spring',3, 6)
analyze_PRvRO('Summer',5, 9)
analyze_PRvRO('Fall', 8, 12)