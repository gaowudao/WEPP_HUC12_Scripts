import pandas as pd
import numpy as np
import os

def prep_data(obs_dir, wshed, cli_dir, wepp_out_dir, hillID, mod_rot_starters, obs_rot):

    ###### load in climate data and fill in missing obs values ######

    #Create path to daily MnDNR data and read into df
    MnDNR_daily_xlsx = str(obs_dir + '{}_daily_MnDNR_sub.xlsx'.format(wshed))
    MnDNR_df = pd.read_excel(MnDNR_daily_xlsx)
    MnDNR_df['DNR_pr'] = (MnDNR_df['Pr'].apply(pd.to_numeric, errors='coerce')) * 25.4

    #Read in and prep cligen data
    cli_df = pd.read_csv(str(cli_dir + '/{}.cli'.format(hillID)), skiprows = 13, sep = '\s+| ', engine = 'python')
    cli_df.drop([0,], axis = 0, inplace = True)
    cli_df.reset_index(inplace = True)
    cli_df['cli_pr'] = cli_df['prcp'].astype(float)

    #concatenate cligen precip column to MnDNR df and return new df
    comb_df = pd.concat([MnDNR_df, cli_df['cli_pr']], axis=1)

    #If MnDNR col is missing data, fill in with cligen data using np.where()
    comb_df['filled_pr'] = (np.where(comb_df['DNR_pr'].isna(),\
                                     comb_df['cli_pr'],\
                                     comb_df['DNR_pr']))

    

    ###### Load in runoff data ######

    #Load in observed data (whole dataset)
    obs_data_whole = pd.read_excel(str(obs_dir + '/{}_Obs_RO.xlsx'.format(wshed)))

    #select data for March-November
    obs_data_months = obs_data_whole[obs_data_whole['Month'].astype(int) > 3]
    obs_data_months = obs_data_months[obs_data_months['Month'].astype(int) < 12]

    #trim down data column to only include day, month, and year
    obs_data_months['Date'] = obs_data_months['Date'].astype(str).str[0:10]

    #observed data occasionally has multiple events on same day. Combine these into daily values
    aggregation_functions = {'Date': 'first', 'Year': 'first', 'Month': 'first',\
                             'Day':'first', 'RO (in)':'sum', 'TSS (lbs/ac)':'sum'}

    obs_data_months = obs_data_months.groupby(obs_data_months['Date']).aggregate(aggregation_functions)

    #convert runoff from in to mm in observed data
    obs_data_months['RO'] = obs_data_months['RO (in)'] * 25.4


    #Read in data from ebe WEPP output file for a specified calibration scenario


    #get ebe file from output directory
    hillslopes = [x for x in os.listdir(wepp_out_dir) if x.endswith('.ebe.dat')]

    #only one hillslope in DF simulations so just select first file in list
    hill = hillslopes[0]

    #define column names for ebe file load in
    ebe_col_list = ['Day', 'Month', 'Year', 'Precip', 'RO', 'IR-det',\
                    'Av-det', 'Mx-det', 'Point', 'Av-dep', 'Mx-dep',\
                    'Point_2', 'Sed-Del', 'ER']

    #read in ebe file to dataframe
    all_data = pd.read_csv(str(wepp_out_dir+hill), skiprows = 3,\
                        names = ebe_col_list, sep = '\s+', header=None)

    #select data for March-November
    sel_mod_data = all_data[all_data['Month'] > 3] 
    mod_data_months = sel_mod_data[sel_mod_data['Month'] < 12]



    ###### prep runoff data ######


    ## Obs data

    #merge observed precip to observed runoff
    obs_df = pd.merge(obs_data_months, comb_df, on = ['Year', 'Month', 'Day'], how = 'left')

    print(wshed)
    print(obs_df)


    ## Modeled data

    #create list to hold all "corresponding_mod_yrs" lists
    all_div_mod_yrs = {}

    #loop through mod start years (equivalent to obs year length)
    for mod_starter_yr,obs_yr in zip(mod_rot_starters,obs_rot):
        
        #create list that holds all mods years corresponding to the given observed year
        corresponding_mod_yrs = []
        
        #loop through a multiplier so that all model years that match an obs year are
        #created and add to the corresponding_mod_yrs list
        for n in range(0,11):
            if n == 0:
                mod_yr = mod_starter_yr
            if n > 0:
                mod_yr = mod_starter_yr + (len(obs_rot) * n)
                
            corresponding_mod_yrs.append(mod_yr)
            
        #append list of all matching mod years to a new list so that there is a list of
        #matching mod years for each observed year
        all_div_mod_yrs[obs_yr] = corresponding_mod_yrs

    #change years in WEPP ebe format (1,2,3,4,5, etc) to years corresponding to obs data (ex: 2012, 2013, etc)
    for year,key in zip(all_div_mod_yrs, all_div_mod_yrs.keys()):
        mod_data_months['Year'].replace(all_div_mod_yrs[year], key, inplace = True)

    mod_df = mod_data_months

    print(mod_df)


#create list of watershed IDs, simulated hillslope IDs, and number 
#of years in each observed crop rotation (crop rot = simulation period)
wshed_lst = ['BE1', 'DO1', 'GO1', 'RO1', 'ST1']
hillslopes = ['p221', 'p206', 'p66', 'p77', 'p154']

lst_mod_rot_starts_wshed = [[1,2,3,4,5], [1,2,3,4,5,6,7], [1,2,3,4,5,6],\
                      [1,2,3,4,5,6], [1,2,3,4,5,6,7]]

obs_rot_yrs = [[2012,2013,2014,2015,2016],\
                [2013,2014,2015,2016,2017,2018,2019],\
                [2011,2012,2013,2014,2015,2016],\
                [2014,2015,2016,2017,2018,2019],\
                [2011,2012,2013,2014,2015,2016,2017]]


for wshed, hill, mod_rot_starters, obs_rot in zip(wshed_lst,hillslopes, lst_mod_rot_starts_wshed, obs_rot_yrs):
    #set directory paths to mndnr and cligen data
    obs_dir = 'C:/Users/Garner/Soil_Erosion_Project/WEPP_PRWs/{}/obs_data/'.format(wshed)
    cli_dir = 'C:/Users/Garner/Soil_Erosion_Project/WEPP_PRWs/{}/Runs/DF_Comp/Obs/wepp/runs/'.format(wshed)
    wepp_out_dir = 'C:/Users/Garner/Soil_Erosion_Project/WEPP_PRWs/{}/Runs/DF_Comp/Obs/wepp/output/'.format(wshed)

    prep_data(obs_dir, wshed, cli_dir, wepp_out_dir, hill, mod_rot_starters, obs_rot)